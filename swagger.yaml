openapi: 3.0.0
info:
  title: JUMIA-CLONE
  version: 1.0.0
servers:
  - url: https://jumia-clone-backend-2e1eb0378ca5.herokuapp.com/api/v1
  - url: http://localhost:5000/api/v1/
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    CartItem:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product.
        quantity:
          type: integer
          description: The quantity of the product.
      example:
        productId: 673c7b4a7f053fb84e297065
        quantity: 3
    Product:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        brand:
          type: string
      example:
        name: "Apple iPhone 13"
        description: "Latest iPhone model"
        price: 999
        brand: "Apple"
    Order:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
        orderStatus:
          type: string
        paymentDetails:
          type: object
          properties:
            method:
              type: string
            paymentStatus:
              type: string
            amountPaid:
              type: number
        shippingAddress:
          type: object
          properties:
            street:
              type: string
            city:
              type: string
            state:
              type: string
            country:
              type: string
      example:
        items:
          - productId: 673c7b4a7f053fb84e29707d
            quantity: 50
            price: 950
          - productId: 673c7b4a7f053fb84e297075
            quantity: 44
            price: 3000
        totalAmount: 130
        orderStatus: Pending
        paymentDetails:
          method: "Credit Card"
          paymentStatus: "Pending"
          amountPaid: 130
        shippingAddress:
          street: "123 Main St"
          city: "New York"
          state: "NY"
          country: "USA"
tags:
  - name: Cart
  - name: Product
  - name: Order
  - name: Auth
paths:
  /cart:
    get:
      tags:
        - Cart
      summary: Get all cart items
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Cart not found.
        '500':
          description: Internal server error.
    post:
      tags:
        - Cart
      summary: Add an item to the cart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Bad request, invalid input.
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Product not found.
        '500':
          description: Internal server error.
  /cart/{id}:
    delete:
      tags:
        - Cart
      summary: Delete a cart item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the cart item to delete.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Cart item not found.
        '500':
          description: Internal server error.
    patch:
      tags:
        - Cart
      summary: Update a cart item
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The ID of the cart item to update.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  description: Updated quantity.
              example:
                quantity: 12
        required: true
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '400':
          description: Bad request, invalid input.
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Cart item not found.
        '500':
          description: Internal server error.
  /products:
    get:
      tags:
        - Product
      summary: Get all products
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            example: 3
          description: The page number for pagination.
        - name: limit
          in: query
          schema:
            type: integer
            example: 10
          description: The number of items per page.
        - name: search
          in: query
          schema:
            type: string
            example: "laptop"
          description: Get products that contain the search term in their name or description.
        - name: Brand
          in: query
          schema:
            type: string
            example: "nike or nike,asos"
          description: Get products of a particular brand or multiple brands.
        - name: sort
          in: query
          schema:
            type: string
            example: "name or name,price"
          description: Sort filtered products.
        - name: discount
          in: query
          schema:
            type: integer
            example: 50
          description: Get products with a discount greater than or equal to the specified value.
        - name: priceRange
          in: query
          schema:
            type: string
            example: "200-800"
          description: Get products within the specified price range.
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Products not found.
        '500':
          description: Internal server error.
  /products/{productId}:
    get:
      tags:
        - Product
      summary: Get details of a single product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to fetch.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
        '401':
          description: Unauthorized, user not authenticated.
        '404':
          description: Product not found.
        '500':
          description: Internal server error.
